package com.wipro.balaji.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

import com.wipro.balaji.dto.AccountDto;
import com.wipro.balaji.dto.AccountResponse;
import com.wipro.balaji.dto.AuditEvent;
import com.wipro.balaji.dto.TransactionEvent;
import com.wipro.balaji.dto.TransactionWithAccountDto;
import com.wipro.balaji.entity.Transaction;
import com.wipro.balaji.enums.TransactionStatus;
import com.wipro.balaji.feign.TransactionFeignClient;
import com.wipro.balaji.repo.TransactionRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class TransactionServiceImpl implements TransactionService {
	
	private final TransactionRepository transactionRepository;
	
	private final TransactionFeignClient transactionFeignClient;
	
	@Autowired
	private KafkaTemplate<String, Object> kafkaTemplate;
	


    // 1. Create Transaction
    public Transaction createTransaction(Transaction transaction) {
        // Validate accounts from Account Service
       /* AccountResponse sourceAccount = accountClient.getAccountById(tx.getSourceAccountId());
        if (sourceAccount == null) {
            throw new RuntimeException("Source account not found");
        }

        if (tx.getDestinationAccountId() != null) {
            AccountResponse destAccount = accountClient.getAccountById(tx.getDestinationAccountId());
            if (destAccount == null) {
                throw new RuntimeException("Destination account not found");
            }
        }

        tx.setStatus(TransactionStatus.INITIATED);
        tx.setCreatedAt(LocalDateTime.now());*/

        return transactionRepository.save(transaction);
    }

    // 2. Get transaction by ID
    public Transaction getTransactionById(Long id) {
        return transactionRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Transaction not found"));
    }

    // 3. Get all
    public Page<Transaction> getAllTransactions(Pageable pageable) {
        return transactionRepository.findAll(pageable);
    }

	@Override
	public Transaction updateTransactionStatus(Long id, TransactionStatus status, String failureReason) {
        Transaction tx = getTransactionById(id);
        tx.setStatus(status);
        if (failureReason != null) tx.setFailureReason(failureReason);
        return transactionRepository.save(tx);
	}

    // 4. Get by Account ID
  /*  public List<Transaction> getTransactionsByAccount(Long accountId) {
        return transactionRepository.findBySourceAccountIdOrDestinationAccountId(accountId, accountId);
    }*/
	
	public Transaction completeTransaction(Transaction transaction) {
	    transaction.setStatus(TransactionStatus.COMPLETED);
	    transactionRepository.save(transaction);

	    // Publish event
	    TransactionEvent event = new TransactionEvent();
	    event.setTransactionId(transaction.getTransactionId());
	    event.setCustomerId(transaction.getSourceAccountId()); // assuming source customer
	    event.setAmount(transaction.getAmount());
	    event.setCurrency(transaction.getCurrency());
	    event.setStatus(transaction.getStatus().name());

	    kafkaTemplate.send("transaction-events", event);
	    

	    return transaction;
	}

	@Override
	public TransactionWithAccountDto getTransactionWithAccountDetails(Long id) {
		Transaction transaction = transactionRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Transaction with Id " + id + " not found"));
		
		AccountDto account = transactionFeignClient.getAccountById(transaction.getTransactionId());
        TransactionWithAccountDto response = new TransactionWithAccountDto();
        response.setTransactionId(transaction.getTransactionId());
        response.setSourceAccountId(transaction.getSourceAccountId());
        response.setDestinationAccountId(transaction.getDestinationAccountId());
        response.setTransactionType(transaction.getTransactionType());
        response.setAmount(transaction.getAmount());
        response.setCurrency(transaction.getCurrency());
        response.setStatus(transaction.getStatus());
        response.setAccount(account); // inject account details
		return response;
		
	}
	


}
